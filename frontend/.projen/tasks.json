{
  "tasks": {
    "clobber": {
      "name": "clobber",
      "category": "30.maintain",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "bump": {
      "name": "bump",
      "category": "20.release",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "steps": [
        {
          "exec": "git -c \"versionsort.suffix=-\" tag --sort=\"-version:refname\" --list \"v*\" | head -n1 > .version.tmp.json"
        },
        {
          "exec": "standard-version"
        }
      ],
      "condition": "! git log --oneline -1 | grep -q \"chore(release):\""
    },
    "unbump": {
      "name": "unbump",
      "category": "20.release",
      "description": "Restores version to 0.0.0",
      "steps": [
        {
          "exec": "standard-version -r 0.0.0"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "category": "00.build",
      "description": "Only compile"
    },
    "test:compile": {
      "name": "test:compile",
      "category": "10.test",
      "description": "compiles the test code"
    },
    "test": {
      "name": "test",
      "category": "10.test",
      "description": "Runs tests",
      "steps": [
        {
          "exec": "react-scripts test"
        }
      ]
    },
    "build": {
      "name": "build",
      "category": "00.build",
      "description": "Creates an optimized production build of your React application",
      "steps": [
        {
          "exec": "react-scripts build"
        }
      ]
    },
    "projen:upgrade": {
      "name": "projen:upgrade",
      "category": "30.maintain",
      "description": "upgrades projen to the latest version",
      "steps": [
        {
          "exec": "yarn upgrade -L projen"
        },
        {
          "exec": "CI=\"\" yarn projen"
        }
      ]
    },
    "default": {
      "name": "default",
      "steps": [
        {
          "exec": "node .projenrc.js"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "category": "00.build",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "tsc -w"
        }
      ]
    },
    "dev": {
      "name": "dev",
      "description": "Runs the application locally",
      "steps": [
        {
          "exec": "react-scripts start"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "category": "99.misc",
      "description": "Ejects your React application from react-scripts",
      "steps": [
        {
          "exec": "react-scripts eject"
        }
      ]
    },
    "debug": {
      "name": "debug",
      "description": "Runs the application locally",
      "steps": [
        {
          "exec": "react-scripts debug"
        }
      ]
    },
    "generate-exports": {
      "name": "generate-exports",
      "description": "Generates aws-exports.js",
      "steps": [
        {
          "exec": "node bin/generateExports.js dev && node bin/generateExports.js prod && cp src/config/dev/config.js public/config.js"
        }
      ]
    },
    "copy-schema": {
      "name": "copy-schema",
      "steps": [
        {
          "exec": "cp ../appsync/schema.graphql ./schema.graphql"
        }
      ]
    },
    "generate-statements": {
      "name": "generate-statements",
      "steps": [
        {
          "exec": "node bin/generateStatements.js"
        }
      ]
    },
    "codegen": {
      "name": "codegen",
      "description": "Generates frontend GraphQL wrapper API code",
      "steps": [
        {
          "exec": "yarn run copy-schema && yarn run generate-statements && graphql-codegen --config codegen.yml && rm schema.graphql"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node -e \\\"console.log(process.env.PATH)\\\"\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
