type Ec2Config
  @model
  @auth(rules: [{ allow: owner }, { allow: private }, { allow: public }]) {
  id: ID!
  startDate: AWSDateTime!
  stopDate: AWSDateTime!
  userId: String!
  vmType: Int!
  history: [HistoryEntry] @connection(keyName: "byEc2Config", fields: ["id"])
}

enum State {
  PENDING
  RUNNING
  TERMINATED
  STOPPING
  STOPPED
  UNKOWN
}

type Ec2 {
  id: ID!
  userId: String!
  vmType: Int!
  name: String!
  state: State!
  publicDnsName: String
  privateKey: String
}

type Query {
  listTodos: [Todo] @http(url: "https://jsonplaceholder.typicode.com/todos")
  getTodo: Todo @http(url: "https://jsonplaceholder.typicode.com/todos/:id")
  listEc2: [Ec2] @function(name: "queryEc2")
}

type HistoryEntry
  @model
  @key(name: "byEc2Config", fields: ["ec2ConfigId", "comment"]) {
  id: ID!
  ec2ConfigId: ID!
  comment: String!
  time: AWSDateTime!
}

type Post
  @model
  @auth(rules: [{ allow: public, provider: iam }, { allow: owner }]) {
  id: ID!
  title: String!
  content: String!
  username: String!
}

type Message
  @model #(subscriptions: { level: public })
  # @auth(rules: [
  #   # { allow: public, provider: iam }
  #   { allow: private, provider: iam, operations: [read, update, create, delete] }
  # ])
  # @auth(rules: [{ allow: owner }, { allow: public, provider: iam }]) {
  @auth(rules: [{ allow: owner }, { allow: private }, { allow: public }]) {
  # @auth(rules: [{ allow: owner }, { allow: public }]) {
  # @auth(rules: [{ allow: owner, operations: [create, delete, update] }]) {
  id: ID!
  authorId: String!
  content: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

# https://jsonplaceholder.typicode.com/
type Todo {
  id: Int!
  userId: Int!
  title: String!
  completed: Boolean!
}

# type User
#   @model
#   @auth(rules: [{ allow: owner, ownerField: "id", queries: null }]) {
#   id: ID!
#   username: String!
#   conversations: [ConvoLink] @connection(name: "UserLinks")
#   messages: [Message] @connection(name: "UserMessages")
#   createdAt: AWSDateTime!
#   updatedAt: AWSDateTime!
# }

# type Conversation
#   @model
#   # (
#   #   mutations: { create: "createConvo" }
#   #   queries: { get: "getConvo" }
#   #   subscriptions: null
#   # )
#   @auth(rules: [{ allow: owner, ownerField: "members" }]) {
#   id: ID!
#   messages: [Message] @connection(name: "ConvoMsgs", sortField: "createdAt")
#   associated: [ConvoLink] @connection(name: "AssociatedLinks")
#   name: String!
#   members: [String!]!
#   createdAt: AWSDateTime!
#   updatedAt: AWSDateTime!
# }

# type Message @model {
#   # (
#   # subscriptions: null
#   # queries: null
#   # )
#   @auth(rules: [{ allow: owner, ownerField: "authorId" }])
#   id: ID!
#   # author: User @connection(name: "UserMessages", keyField: "authorId")
#   authorId: String
#   content: String!
#   # conversation: Conversation! @connection(name: "ConvoMsgs")
#   # messageConversationId: ID!
#   createdAt: AWSDateTime!
#   updatedAt: AWSDateTime!
# }

# type ConvoLink
#   @model(
#     mutations: { create: "createConvoLink", update: "updateConvoLink" }
#     queries: null
#     subscriptions: null
#   ) {
#   id: ID!
#   user: User! @connection(name: "UserLinks")
#   convoLinkUserId: ID
#   conversation: Conversation! @connection(name: "AssociatedLinks")
#   convoLinkConversationId: ID!
#   createdAt: AWSDateTime!
#   updatedAt: AWSDateTime!
# }

